/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package options.model;

import java.sql.ResultSet;
import java.sql.SQLException;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import util.DBUtil;

/**
 *
 * @author jdleg
 */
public class optionsDAO {

    //drops all the tables
    public static String[] dropTables() throws ClassNotFoundException, SQLException {
        String sql = "drop table refunds cascade constraints;"
                + "drop table cancellations cascade constraints;"
                + "drop table tour_payment cascade constraints;"
                + "drop table tours cascade constraints;"
                + "drop table availability cascade constraints;"
                + "drop table schedule cascade constraints;"
                + "drop table booking_cost cascade constraints;"
                + "drop table customer_booking cascade constraints;"
                + "drop table customers cascade constraints;"
                + "drop table bookings cascade constraints";
        try {
            System.out.println(sql);
            return DBUtil.dbExecuteMultipleUpdate(sql);
        } catch (SQLException e) {
            System.out.println("Exception occur while dropping tables " + e);
            e.printStackTrace();
            throw e;
        }

    }

    //creates all the tables
    public static String[] createTables() throws ClassNotFoundException, SQLException {
        String sql = "CREATE TABLE BOOKINGS("
                + "service_no number GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,"
                + "departure VARCHAR2(64) NOT NULL,"
                + "destination VARCHAR2(64) NOT NULL,"
                + "mode_of_transport VARCHAR2(64) NOT NULL,"
                + "return_no INTEGER DEFAULT NULL"
                + "); "
                + "CREATE TABLE CUSTOMERS("
                + "customerID number GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,"
                + "username VARCHAR2(16) NOT NULL,"
                + "userPass VARCHAR2(16) NOT NULL,"
                + "cardNo VARCHAR2(16) NOT NULL,"
                + "loyaltyPoints INTEGER DEFAULT 0"
                + "); "
                + "CREATE TABLE CUSTOMER_BOOKING("
                + "customerID INTEGER REFERENCES CUSTOMERS(customerID) PRIMARY KEY,"
                + "modeOfPay INTEGER DEFAULT 0,"
                + "needReturn VARCHAR2(1) DEFAULT 'N',"
                + "points INTEGER DEFAULT NULL"
                + "); "
                + "CREATE TABLE BOOKING_COST("
                + "customerID INTEGER REFERENCES CUSTOMERS(customerID),"
                + "service_no INTEGER REFERENCES BOOKINGS(service_no),"
                + "points INTEGER DEFAULT 0,"
                + "cost DOUBLE PRECISION NOT NULL,"
                + "PRIMARY KEY(service_no, points, customerID)"
                + "); "
                + "CREATE TABLE SCHEDULE("
                + "service_no INTEGER NOT NULL REFERENCES BOOKINGS(service_no) ON DELETE CASCADE,"
                + "Arrival_Date_Time TIMESTAMP NOT NULL,"
                + "Dep_Date_Time TIMESTAMP NOT NULL,"
                + "PRIMARY KEY (service_no, Dep_Date_Time)"
                + "); "
                + "CREATE TABLE AVAILABILITY("
                + "service_no INTEGER NOT NULL REFERENCES BOOKINGS(service_no) ON DELETE CASCADE,"
                + "Dep_Date_Time TIMESTAMP NOT NULL,"
                + "No_seats_available INTEGER DEFAULT 0,"
                + "PRIMARY KEY (service_no, Dep_Date_Time)"
                + "); "
                + "CREATE TABLE TOURS("
                + "destination VARCHAR2 (16) NOT NULL,"
                + "tourDate  TIMESTAMP NOT NULL,"
                + "cost DOUBLE PRECISION NOT NULL,"
                + "customerID INTEGER REFERENCES CUSTOMERS(customerID),"
                + "PRIMARY KEY (destination, tourDate)"
                + "); "
                + "CREATE TABLE TOUR_PAYMENT("
                + "customerID INTEGER REFERENCES CUSTOMERS(customerID) PRIMARY KEY,"
                + "modeOfPay INTEGER DEFAULT 0"
                + "); "
                + "CREATE TABLE CANCELLATIONS("
                + "customerID INTEGER REFERENCES CUSTOMERS(customerID) NOT NULL,"
                + "service_no  INTEGER REFERENCES BOOKINGS(service_no) NOT NULL,"
                + "refundAmount DOUBLE PRECISION DEFAULT 0,"
                + "PRIMARY KEY (customerID, service_no)"
                + "); "
                + "CREATE TABLE REFUNDS("
                + "customerID INTEGER REFERENCES CUSTOMERS(customerID) PRIMARY KEY,"
                + "refundStatus VARCHAR2(1) DEFAULT 'N'"
                + ")";
        try {
            System.out.println(sql);
            return DBUtil.dbExecuteMultipleUpdate(sql);

        } catch (SQLException e) {
            System.out.println("Exception occur while creating tables " + e);
            e.printStackTrace();
            throw e;
        }

    }

    //creates all the tables
    public static String[] populateTables() throws ClassNotFoundException, SQLException {
        String sql = "INSERT INTO CUSTOMERS(username, userPass, cardNo)"
                + "VALUES ('Jacob','b','1234567891234567');"
                + "INSERT INTO CUSTOMERS(username, userPass, cardNo)"
                + "VALUES('Steve','d','1234567890123456');"
                + "INSERT INTO CUSTOMERS(username, userPass, cardNo)"
                + "VALUES('Albert','f','1234567890123456');"
                + "INSERT INTO CUSTOMERS(username, userPass, cardNo)"
                + "VALUES('Greg','f','1234567890123456');"
                + "INSERT INTO CUSTOMERS(username, userPass, cardNo)"
                + "VALUES('Bravo','f','1234567890123456');"
                + "INSERT INTO BOOKINGS(departure, destination, mode_of_transport)"
                + "VALUES('Toronto','Halifax','Plane');"
                + "INSERT INTO BOOKINGS(departure, destination, mode_of_transport)"
                + "VALUES('Halifax','Toronto','Plane');"
                + "INSERT INTO BOOKINGS(departure, destination, mode_of_transport)"
                + "VALUES('Toronto','Quebec','Train');"
                + "INSERT INTO BOOKINGS(departure, destination, mode_of_transport)"
                + "VALUES('Toronto', 'Halifax', 'Train');"
                + "INSERT INTO CUSTOMER_BOOKING(customerID, modeOfPay, needReturn)"
                + "VALUES(1, 1, 'N');"
                + "INSERT INTO CUSTOMER_BOOKING(customerID, modeOfPay, needReturn)"
                + "VALUES(2, 0, 'N');"
                + "INSERT INTO CUSTOMER_BOOKING(customerID, modeOfPay, needReturn)"
                + "VALUES(3, 1, 'Y');"
                + "INSERT INTO CUSTOMER_BOOKING(customerID, modeOfPay, needReturn)"
                + "VALUES(4, 0, 'Y');"
                + "INSERT INTO BOOKING_COST(customerID, service_no, points, cost)"
                + "SELECT 1, 1, loyaltyPoints, (CASE WHEN (156.1 < (loyaltyPoints*0.1)) THEN 0 ELSE (156.1 - (loyaltyPoints*.1)) END) FROM customers where customerID = 1;"
                + "INSERT INTO BOOKING_COST(customerID, service_no, points, cost)"
                + "SELECT 2, 2, loyaltyPoints, (CASE WHEN (125.1 < (loyaltyPoints*0.1)) THEN 0 ELSE (125.1 - (loyaltyPoints*.1)) END) FROM customers where customerID = 2;"
                + "INSERT INTO BOOKING_COST(customerID, service_no, points, cost)"
                + "SELECT 3, 3, loyaltyPoints, (CASE WHEN (34.1 < (loyaltyPoints*0.1)) THEN 0 ELSE (34.1 - (loyaltyPoints*.1)) END) FROM customers where customerID = 3;"
                + "INSERT INTO BOOKING_COST(customerID, service_no, points, cost)"
                + "SELECT 4, 4, loyaltyPoints, (CASE WHEN (500.1 < (loyaltyPoints*0.1)) THEN 0 ELSE (500.1 - (loyaltyPoints*.1)) END) FROM customers where customerID = 4;"
                + "INSERT INTO AVAILABILITY(service_no, Dep_Date_Time,No_seats_available)"
                + "VALUES (1, TIMESTAMP'2023-09-10 11:11:11', 250);"
                + "INSERT INTO AVAILABILITY(service_no, Dep_Date_Time,No_seats_available)"
                + "VALUES (2, TIMESTAMP'2023-10-10 22:10:00', 286);"
                + "INSERT INTO AVAILABILITY(service_no, Dep_Date_Time,No_seats_available)"
                + "VALUES (3, TIMESTAMP'2023-09-12 22:56:12', 323);"
                + "INSERT INTO TOURS (destination, tourDate, cost, customerID)"
                + "VALUES ('Madrid', TIMESTAMP'2023-10-10 22:10:00', 5000, 1);"
                + "INSERT INTO TOURS (destination, tourDate, cost, customerID)"
                + "VALUES ('London', TIMESTAMP'2023-12-12 22:08:00', 3000, 2);"
                + "INSERT INTO TOURS (destination, tourDate, cost, customerID)"
                + "VALUES ('Paris', TIMESTAMP'2023-04-08 21:05:01', 4000, 3);"
                + "INSERT INTO TOURS (destination, tourDate, cost, customerID)"
                + "VALUES ('New York', TIMESTAMP'2022-10-04 21:05:01', 3400, 4);"
                + "INSERT INTO TOUR_PAYMENT(customerID, modeOfPay)"
                + "VALUES (1, 1);"
                + "INSERT INTO TOUR_PAYMENT(customerID, modeOfPay)"
                + "VALUES (2, 1);"
                + "INSERT INTO TOUR_PAYMENT(customerID, modeOfPay)"
                + "VALUES (3, 0);"
                + "INSERT INTO TOUR_PAYMENT(customerID, modeOfPay)"
                + "VALUES (4, 0);"
                + "INSERT INTO SCHEDULE (service_no, Dep_Date_Time,Arrival_Date_Time)"
                + "VALUES (1, TIMESTAMP'2022-11-28 11:11:11', TIMESTAMP'2023-09-10 12:28:11');"
                + "INSERT INTO SCHEDULE (service_no, Dep_Date_Time,Arrival_Date_Time)"
                + "VALUES (2, TIMESTAMP'2023-06-13 12:09:11', TIMESTAMP'2023-06-14 14:11:11');"
                + "INSERT INTO SCHEDULE (service_no, Dep_Date_Time,Arrival_Date_Time)"
                + "VALUES (3, TIMESTAMP'2022-10-30 12:09:11', TIMESTAMP'2023-07-14 13:10:11');"
                + "INSERT INTO CANCELLATIONS(customerID, service_no, refundAmount)"
                + "SELECT 1, 1, bc.cost FROM booking_cost bc where customerID = 1;"
                + "INSERT INTO CANCELLATIONS(customerID, service_no, refundAmount)"
                + "SELECT 2, 2, bc.cost FROM booking_cost bc where customerID = 2;"
                + "INSERT INTO REFUNDS(customerID, refundStatus)"
                + "SELECT customerID, 'N' FROM cancellations";
        try {
            System.out.println(sql);
            return DBUtil.dbExecuteMultipleUpdate(sql);

        } catch (SQLException e) {
            System.out.println("Exception occur while creating tables " + e);
            e.printStackTrace();
            throw e;
        }

    }

    //returns all trips within 14 days from now 
    public static ObservableList<String> countOfTrips() throws ClassNotFoundException, SQLException {
        String sql = "select count(cb.customerID) as COUNT, b.departure, b.destination "
                + "from booking_cost cb, bookings b, customers c "
                + "where cb.customerID = c.customerID "
                + "and cb.service_no = b.service_no "
                + "group by b.departure, b.destination";
        try {
            System.out.println(sql);
            ResultSet rsSet = DBUtil.dbExecute(sql);
            ObservableList<String> list = getObjectsCount(rsSet);
            return list;
        } catch (SQLException e) {
            System.out.println("Exception occur while getting all records " + e);
            e.printStackTrace();
            throw e;
        }
    }

    //funciton to create a list of all the objects and then return the list
    private static ObservableList<String> getObjectsCount(ResultSet rsSet) throws ClassNotFoundException, SQLException {
        try {
            ObservableList<String> list = FXCollections.observableArrayList();
            list.add("Cnt\tDepart\tDestination");
            while (rsSet.next()) {
                list.add(rsSet.getInt("count") + "\t" + rsSet.getString("departure") + "\t" + rsSet.getString("destination"));
            }
            return list;
        } catch (SQLException e) {
            System.out.println("Error occured while getting the data from db " + e);
            e.printStackTrace();
            throw e;
        }

    }

    //returns all trips within 14 days from now 
    public static ObservableList<String> within14Days() throws ClassNotFoundException, SQLException {
        String sql = "SELECT  schedule.service_no, to_char(schedule.dep_date_time, 'dd/mm/yy HH:MI:SS AM') AS Departure_Date, b.departure, b.destination "
                + "FROM  schedule "
                + "inner join bookings b "
                + "on schedule.dep_date_time "
                + "between current_date "
                + "and current_date+14 "
                + "and b.service_no = schedule.service_no "
                + "ORDER BY schedule.service_no ASC";
        try {
            System.out.println(sql);
            ResultSet rsSet = DBUtil.dbExecute(sql);
            ObservableList<String> list = getObjects14(rsSet);
            return list;
        } catch (SQLException e) {
            System.out.println("Exception occur while getting all records " + e);
            e.printStackTrace();
            throw e;
        }
    }

    //funciton to create a list of all the objects and then return the list
    private static ObservableList<String> getObjects14(ResultSet rsSet) throws ClassNotFoundException, SQLException {
        try {
            ObservableList<String> list = FXCollections.observableArrayList();
            list.add("serNo\tDeparture Date\tDepart\tDestination");
            while (rsSet.next()) {
                list.add(rsSet.getInt("service_no") + "\t" + rsSet.getString("departure_date") + "\t" + rsSet.getString("departure") + "\t" + rsSet.getString("destination"));
            }
            return list;
        } catch (SQLException e) {
            System.out.println("Error occured while getting the data from db " + e);
            e.printStackTrace();
            throw e;
        }

    }

}
